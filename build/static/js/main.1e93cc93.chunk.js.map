{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","state","input","inputPlaceholder","keyword","keywordPlaceholder","parser","dataList","toString","split","forEach","line","splitIndex","indexOf","splitted","substring","obj","first","trim","second","push","JSON","stringify","e","console","log","sendData","json","_this","map","axios","post","setState","sendKeyword","_this2","this","react_default","a","createElement","className","Form","FormGroup","row","Col","xl","Input","style","height","width","type","name","value","placeholder","id","onChange","event","target","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e93cc93.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport axios from 'axios'\nimport {Form, FormGroup, Col, Input, Button} from 'reactstrap'\nimport './App.css'\nconst api = \"http://localhost:5000\"\n\nclass App extends Component {\n\n  state = {\n    input: \"\",\n    inputPlaceholder: \"Accepted format:\\n\\nhallo : welt | DE \\nhello : world | EN\\nbonjour : monde | FR\",\n    keyword: \"\",\n    keywordPlaceholder: \"Example: hello world\"\n  }\n\n  parser = input => {\n\n    try {\n      let dataList = []\n      const textByLine = input.toString().split(\"\\n\")\n\n      textByLine.forEach(line => {\n          const splitIndex = line.indexOf('|')\n          const string = line.substring(0, splitIndex)\n          const splitted = string.split(':')\n      \n          const obj = {\n              \"first\": splitted[0].trim(),\n              \"second\": splitted[1].trim()\n          }\n          dataList.push(JSON.stringify(obj))\n      })\n      return dataList\n    } catch (e) {\n      console.log(e)\n      return null\n    }\n  }\n\n\n  sendData = () => {\n    const json = this.parser(this.state.input)\n\n    if (json !== null) {\n      json.map(obj => {\n        return axios.post(api, obj)\n      })\n      this.setState({inputPlaceholder: \"Sending was successful.\", input: \"\"})\n      console.log(json)\n    } else {\n      this.setState({inputPlaceholder: \"Invalid input.\", input: \"\"})\n    }\n  }\n\n  sendKeyword = () => {\n    const keyword = this.state.keyword\n    this.setState({keywordPlaceholder: \"Sending was successful.\", keyword: \"\"})\n    console.log(keyword)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Form  className=\"App-form\">\n            <p>Search keyword:</p>\n            <FormGroup row>\n              <Col xl={12}>\n                <Input style={{height: 40, width: \"100%\" }} type=\"text\" name=\"text\" value={this.state.keyword} placeholder={this.state.keywordPlaceholder} id=\"exampleText\" onChange={(event) => this.setState({keyword: event.target.value})}/>\n              </Col>\n            </FormGroup>\n            <FormGroup row>\n            <Col  xl={12}>\n              <Button onClick={this.sendKeyword}>Submit</Button>\n            </Col>\n          </FormGroup>\n          </Form>\n          <Form  className=\"App-form\">\n            <p>New data:</p>\n            <FormGroup row>\n              <Col xl={12}>\n                <Input style={{height: 300, width: \"100%\" }} type=\"textarea\" value={this.state.input} name=\"text\" placeholder={this.state.inputPlaceholder} id=\"exampleText\" onChange={(event) => this.setState({input: event.target.value})}/>\n              </Col>\n            </FormGroup>\n            <FormGroup row>\n            <Col  xl={12}>\n              <Button onClick={this.sendData}>Submit</Button>\n            </Col>\n          </FormGroup>\n          </Form>\n        </header>\n      </div>\n    ) \n  }\n}\n\nexport default App \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n) \n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href) \n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets  see https://github.com/facebook/create-react-app/issues/2374\n      return \n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js` \n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config) \n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          ) \n        }) \n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config) \n      }\n    }) \n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing \n        if (installingWorker == null) {\n          return \n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              ) \n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration) \n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.') \n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration) \n              }\n            }\n          }\n        } \n      } \n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error) \n    }) \n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type') \n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload() \n          }) \n        }) \n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config) \n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      ) \n    }) \n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister() \n    }) \n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root')) \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister() \n"],"sourceRoot":""}