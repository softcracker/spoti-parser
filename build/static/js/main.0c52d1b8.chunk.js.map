{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","state","input","inputPlaceholder","amount","email","password","token","authenticated","loginMessage","cluster","componentDidMount","_callee","localToken","res","regenerator_default","a","wrap","_context","prev","next","localStorage","getItem","_this","getAmount","sent","status","setState","stop","parser","dataList","toString","split","forEach","line","splitIndex","indexOf","splitted","substring","obj","username","trim","push","e","console","log","sendData","_callee2","json","_context2","map","axios","post","headers","authorization","_callee3","_context3","get","data","Number","abrupt","t0","login","_callee4","_context4","setItem","deleteAll","_callee5","_context5","delete","selectDB1","selectDB2","_this2","this","loginForm","react_default","createElement","Form","className","FormGroup","row","Col","xl","style","marginBottom","Input","height","width","type","name","value","placeholder","id","onChange","event","target","Button","onClick","inputForm","react","outline","color","active","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c52d1b8.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport axios from 'axios'\nimport { Form, FormGroup, Col, Input, Button } from 'reactstrap'\nimport './App.css'\nconst api = \"https://spoti-api.herokuapp.com/\"\n//const api = \"http://localhost:8080/\"\n\nclass App extends Component {\n\n  state = {\n    input: \"\",\n    inputPlaceholder: \"Accepted format:\\n\\nhallo : welt | DE \\nhello : world | EN\\nbonjour : monde | FR\",\n    amount: \"?\",\n    email: \"\",\n    password: \"\",\n    token: null,\n    authenticated: false,\n    loginMessage: \"Login data:\",\n    cluster: \"user/\"\n  }\n\n  componentDidMount = async () => {\n    const localToken = localStorage.getItem(\"token\")\n    const res = await this.getAmount(localToken)\n    if (res !== null && res.status === 200) {\n      this.setState({ token: localToken, authenticated: true })\n    }\n  }\n\n  parser = input => {\n    try {\n      let dataList = []\n      const textByLine = input.toString().split(\"\\n\")\n      textByLine.forEach(line => {\n        const splitIndex = line.indexOf('|')\n        const string = line.substring(0, splitIndex)\n        const splitted = string.split(':')\n\n        const obj = {\n          \"username\": splitted[0].trim(),\n          \"password\": splitted[1].trim()\n        }\n        dataList.push(obj)\n      })\n      return dataList\n    } catch (e) {\n      console.log(e)\n      return null\n    }\n  }\n\n\n  sendData = async (token) => {\n    const json = this.parser(this.state.input)\n\n    if (json !== null) {\n      try {\n        json.map(obj => {\n          return axios.post(api + this.state.cluster, obj, {\n            headers: {\n              \"authorization\": \"Bearer \" + token\n            }\n          })\n        })\n        this.setState({ inputPlaceholder: \"Sending was successful.\", input: \"\" })\n      } catch (e) {\n        this.setState({ inputPlaceholder: \"Error occured.\", input: \"\" })\n      }\n    } else {\n      this.setState({ inputPlaceholder: \"Invalid input.\", input: \"\" })\n    }\n  }\n\n  getAmount = async (token) => {\n    try {\n      const res = await axios.get(api + this.state.cluster + \"number\", {\n        headers: {\n          \"authorization\": \"Bearer \" + token\n        }\n      })\n      if (res.status === 200) {\n        this.setState({\n          amount: res.data.Number\n        })\n      }\n      return res\n    } catch (e) {\n      return null\n    }\n  }\n\n  login = async () => {\n    try {\n      const res = await axios.post(api + this.state.cluster + \"auth\", {\n        \"email\": this.state.email,\n        \"password\": this.state.password\n      })\n      if (res.status === 200) {\n        this.setState({\n          token: res.data.data.token,\n          authenticated: true,\n          password: \"\",\n          email: \"\"\n        })\n        localStorage.setItem('token', res.data.data.token)\n      } else {\n        this.setState({ password: \"\", email: \"\", loginMessage: \"Invalid input.\" })\n        console.log(res)\n      }\n    } catch (e) {\n      this.setState({ password: \"\", email: \"\", loginMessage: \"Error occured.\" })\n      console.log(e)\n    }\n  }\n\n  deleteAll = async (token) => {\n    try {\n      await axios.delete(api + this.state.cluster, {\n        headers: {\n          \"authorization\": \"Bearer \" + token\n        }\n      })\n      await this.getAmount(this.state.token)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  selectDB1 = () => this.setState({ cluster: \"user/\" })\n\n  selectDB2 = () => this.setState({ cluster: \"user2/\" })\n\n  render() {\n\n    const loginForm = (\n      <Form className=\"App-form\">\n        <p>{this.state.loginMessage}</p>\n        <FormGroup row>\n          <Col xl={12} style={{ marginBottom: 10 }}>\n            <Input\n              style={{ height: 40, width: \"100%\" }}\n              type=\"text\" name=\"text\"\n              value={this.state.email}\n              placeholder=\"email\"\n              id=\"exampleText\"\n              onChange={(event) => this.setState({ email: event.target.value })}\n            />\n          </Col>\n          <Col xl={12}>\n            <Input style={{ height: 40, width: \"100%\" }}\n              type=\"password\" name=\"password\"\n              value={this.state.password}\n              placeholder=\"password\"\n              id=\"examplePwd\" onChange={(event) => this.setState({ password: event.target.value })}\n            />\n          </Col>\n        </FormGroup>\n        <FormGroup row>\n          <Col xl={12}>\n            <Button onClick={this.login}>Login</Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    )\n\n    const inputForm = (\n      <Fragment>\n        <Form className=\"App-form\">\n          <FormGroup row>\n            <Col xl={6}>\n              <p>Selected databse:</p>\n            </Col>\n            <Col xl={3}>\n              <Button outline color=\"secondary\" onClick={this.selectDB1} active={this.state.cluster === \"user/\"}>DB 1</Button>\n            </Col>\n            <Col xl={3}>\n              <Button outline color=\"secondary\" onClick={this.selectDB2} active={this.state.cluster === \"user2/\"} >DB 2</Button>\n            </Col>\n          </FormGroup>\n        </Form>\n        <Form className=\"App-form\">\n          <FormGroup row>\n            <Col xl={6}>\n              <p>Amount of data: {this.state.amount}</p>\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Col xl={6}>\n              <Button style={{ marginBottom: \"20px\" }} onClick={() => this.getAmount(this.state.token)}>Refresh</Button>\n            </Col>\n            <Col xl={6}>\n              <Button color=\"danger\" onClick={() => this.deleteAll(this.state.token)}>Delete all</Button>\n            </Col>\n          </FormGroup>\n          <p>New data:</p>\n          <FormGroup row>\n            <Col xl={12}>\n              <Input style={{ height: 300, width: \"100%\" }}\n                type=\"textarea\" value={this.state.input}\n                name=\"text\" placeholder={this.state.inputPlaceholder}\n                id=\"exampleText\" onChange={(event) => this.setState({ input: event.target.value })}\n              />\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Col xl={12}>\n              <Button onClick={() => this.sendData(this.state.token)}>Submit</Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      </Fragment >\n    )\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {this.state.authenticated ? inputForm : loginForm}\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n) \n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href) \n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets  see https://github.com/facebook/create-react-app/issues/2374\n      return \n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js` \n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config) \n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          ) \n        }) \n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config) \n      }\n    }) \n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing \n        if (installingWorker == null) {\n          return \n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              ) \n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration) \n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.') \n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration) \n              }\n            }\n          }\n        } \n      } \n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error) \n    }) \n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type') \n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload() \n          }) \n        }) \n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config) \n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      ) \n    }) \n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister() \n    }) \n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root')) \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister() \n"],"sourceRoot":""}